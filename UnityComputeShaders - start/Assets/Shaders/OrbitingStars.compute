#pragma kernel OrbitingStars

float time;
RWStructuredBuffer<float3> Result;

float random(float value, float seed = 0.546){
	float res = frac(sin(value + seed) * 143758.5453);
	return res;
}

float3 random3(float value){
	return float3(
		random(value, 3.9812),
		random(value, 7.1536),
		random(value, 5.7241)
	);
}

[numthreads(64,1,1)]
void OrbitingStars (uint3 id : SV_DispatchThreadID)
{
	//by stubstracting 0.5 , sinDir will range from -0.5 to 0.5
    float3 sinDir = normalize(random3(id.x) - 0.5);
	float3 vec = normalize(random3(id.x + 7.1393) - 0.5);
	float3 cosDir = normalize(cross(sinDir,vec));

	//scale the time down, multiply with 712.132.1234 to make it not the same with sinDir
	float scaledTime = time * 0.5 + random(id.x) * 712.1321234;

	// this formular will create a near circle or oval, because sin(x) + cos(x) always equal 1
	float3 pos = sinDir * sin(scaledTime) + cosDir * cos(scaledTime);

	//range from -0.5 to 0.5 to -1 to 1
	//It seems we don't really need to worry about out of bounds error, with 1000 stars, 1024 thread will be dispatch, but if doesn't caused any error here
	Result[id.x] = pos * 2;
}
