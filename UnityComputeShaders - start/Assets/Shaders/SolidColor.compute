// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SolidRed
#pragma kernel SolidYellow
#pragma kernel SplitScreen
#pragma kernel Circle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
uint texResolution;

[numthreads(8,8,1)]
void SolidRed (uint3 id : SV_DispatchThreadID)
{
    // screen color red
    Result[id.xy] = float4(1.0 , 0.0, 0.0, 0.0);
}

[numthreads(8,8,1)]
void SolidYellow (uint3 id : SV_DispatchThreadID)
{
    // will draw yellow
    Result[id.xy] = float4(1.0, 1.0, 0.0, 0.0);
}

[numthreads(8,8,1)]
void SplitScreen (uint3 id : SV_DispatchThreadID)
{
    
    // split screen into 4 colors
    int halfRes = texResolution >> 1;
    Result[id.xy] = float4( step(halfRes,id.x), step(halfRes,id.y),0.0,0.0);
    
}

int inCircle(float length, float radius){
    return length < radius;
}

[numthreads(8,8,1)]
void Circle (uint3 id : SV_DispatchThreadID)
{
    // if use uint, it will only draw a quarter of the circle, because all of these are singed, don't mix unsigned and signed
    int halfRes = texResolution >> 1;
    float2 center = float2(halfRes,halfRes);

    //the vector canbe substract with scalar because the x and y are the same
    float _length = length((float2)((int2)id.xy-halfRes));
    float radius = texResolution>>2;

    int res = inCircle(_length,radius);
    Result[id.xy] = float4( res,res,0.0,0.0);
    
}

